// main global script file
import InventoryItem*ItemGiven;        // Item given to a character

// called when the game starts, before the first room is loaded

// =======================================================================================
function game_start() 
{
  
  gScummBar.SetPosition(0,930);
  gAction.SetPosition(0,889);
  player.Baseline = 1000;
  game.text_speed = 9; 
}

// put anything you want to happen every game cycle in here
function repeatedly_execute() 
{
}

// put here anything you want to happen every game cycle, even when the game is blocked
function repeatedly_execute_always() 
{
}

void ShowOptions()
{
    Verbs.UpdateActionBar();
    OptionGui.ShowOptions();
}


// called when a key is pressed. keycode holds the key's ASCII code
function on_key_press(eKeyCode keycode) 
{
  if (keycode == eKeyF5) ShowOptions();
  if (keycode == eKeyEscape || keycode == eKeyCtrlC) gQuit.Visible=true;  // Ctrl-C or CTRL-Q QUIT
  if (keycode == eKeyF12)   SaveScreenShot("scrnshot.pcx");  // F12
  if (keycode == eKeyCtrlS) Debug(0,0); // Ctrl-S, give all inventory
  if (keycode == eKeyCtrlV) Debug(1,0); // Ctrl-V, version
  if (keycode == eKeyCtrlA) Debug(2,0); // Ctrl-A, show walkable areas
  if (keycode == eKeyCtrlX) Debug(3,0); // Ctrl-X, teleport to ro 
}

function on_mouse_click(MouseButton button) // called when a mouse button is clicked. button is either LEFT or RIGHT
{

}

function on_event(EventType event, int data) {
  if (event==eEventLeaveRoom)
  if (event==eEventRestoreGame) {
    Verbs.Localize();
  }
  if (event==eEventEnterRoomBeforeFadein || event==eEventRestoreGame)
    player.PlaceOnWalkableArea();
}

function dialog_request(int param) {
}


////////////////////////////////////////////////////////////////////////////////////
// Begin of GUI handling
////////////////////////////////////////////////////////////////////////////////////
function Action_Click(GUIControl *control, MouseButton button) {
  Verbs.SetAction(Verbs.GetButtonAction(control.AsButton));
}

function ScrollInv_Click(GUIControl *control, MouseButton button) {
  if (control == btnInvUp) invMain.ScrollUp();
  else invMain.ScrollDown();  
}

/*function btnShowOptions_OnClick(GUIControl *control, MouseButton button)
{
  ShowOptions();
}*/

function btnOptions_OnClick(GUIControl *control, MouseButton button)
{
    OptionGui.OnClick(control, button);
}

function btnOptions_OnSliderChange(GUIControl *control)
{
    OptionGui.OnSliderChange(control);
}


////////////////////////////////////////////////////////////////////////////////////
// End of GUI handling
////////////////////////////////////////////////////////////////////////////////////


/* Character, Object, Hotspot full blown SAMPLE
function cChar_AnyClick() {
  // WALK TO
  if (Verbs.UsedAction(eGA_WalkTo)) {
    Verbs.GoTo();
  }
  // TALK TO 
  else if (Verbs.UsedAction(eGA_TalkTo)) {
    Verbs.Unhandled();
  }
  // LOOK AT
  else if(Verbs.UsedAction(eGA_LookAt)) {
    Verbs.Unhandled();
  }
  // OPEN
  else if(Verbs.UsedAction(eGA_Open)) {
    Verbs.Unhandled();
  }  
  // CLOSE
  else if(Verbs.UsedAction(eGA_Close)) {
    Verbs.Unhandled();
  }
  // USE
  else if(Verbs.UsedAction(eGA_Use)) {
    Verbs.Unhandled();
  }
  // Push
  else if(Verbs.UsedAction(eGA_Push)) {
    Verbs.Unhandled();
  }
  // Pull
  else if(Verbs.UsedAction(eGA_Pull)) {
    Verbs.Unhandled();
  } 
  // PICKUP
  else if(Verbs.UsedAction(eGA_PickUp)) {
    Verbs.Unhandled();
  }
  // GIVE TO (characters only)
  else if(Verbs.UsedAction(eGA_GiveTo)) {
    Verbs.Unhandled();
  }  
  //USE INV
  else if(Verbs.UsedAction(eGA_UseInv)) {
    Verbs.Unhandled();
  }
  else Verbs.Unhandled();
}
*/

/* Inventory SAMPLE
  // LOOK AT
  else if(Verbs.UsedAction(eGA_LookAt)) {
    Unhandled();
  }
  // USE
  else if(Verbs.UsedAction(eGA_Use)) {
    Unhandled();
  }
  // Push
  else if(Verbs.UsedAction(eGA_Push)) {
    Unhandled();
  }
  // Pull
  else if(Verbs.UsedAction(eGA_Pull)) {
    Unhandled();
  }   
  //USE INV
  else if(Verbs.UsedAction(eGA_UseInv)) {
    Unhandled();
  }
  else Unhandled();

*/


/***********************************************************************
 * Inventory functions
 * 
 ***********************************************************************/
/*function iCup_OtherClick()
{
  if (Verbs.UsedAction(eGA_Use)) {
    player.Say("Let's spill the liquid and have a look.");
    Wait(10);
    player.LoseInventory(iCup);
    player.AddInventory(iCupEmpty);
    player.AddInventory(iKeyCard);
    player.Say("Voilà, I found a keycard.");
  }
  else if (Verbs.UsedAction(eGA_LookAt)) {
    player.Say("It is a blue cup, filled with liquid.");
    player.Say("I could swear that there is tiny object shimmering on the ground.");
  }
  else Verbs.Unhandled();
}


/***********************************************************************
 * Character functions
 * 
 ***********************************************************************/
/*function cHologram_AnyClick()
{
  //Walk to
  if (Verbs.UsedAction(eGA_WalkTo)) {
    Verbs.GoTo();
  }
  // TALK TO
  if (Verbs.UsedAction(eGA_TalkTo)) {
    dDialog1.Start();
  }
  // LOOK AT
  else if(Verbs.UsedAction(eGA_LookAt)) {
    Verbs.Unhandled();
  }
  // OPEN
  else if(Verbs.UsedAction(eGA_Open)) {
    Verbs.Unhandled();
  }  
  // CLOSE
  else if(Verbs.UsedAction(eGA_Close)) {
    Verbs.Unhandled();
  }
  // USE
  else if(Verbs.UsedAction(eGA_Use)) {
   Verbs.Unhandled();
  }
  // Push
  else if(Verbs.UsedAction(eGA_Push)) {
    Verbs.Unhandled();
  }
  // Pull
  else if(Verbs.UsedAction(eGA_Pull)) {
    Verbs.Unhandled();
  } 
  // PICKUP
  else if(Verbs.UsedAction(eGA_PickUp)) {
    Verbs.Unhandled();
  }
  // GIVE TO
  else if (Verbs.UsedAction(eGA_GiveTo)) {
    player.Say("Do you want this?");
    cHologram.Say("I have no pockets.");
  }
  //USE INV
  else if(Verbs.UsedAction(eGA_UseInv)) {
    player.Say("A hologram has no pockets.");
  }
  else Verbs.Unhandled();
}
*/


function iCigarretes_OtherClick()
{
   // LOOK AT
   if(Verbs.UsedAction(eGA_LookAt)) {
    player.Say("Asesino!");
   }
   // USE
   else if(Verbs.UsedAction(eGA_Use)) {
      player.Say("Ahora no");
   }
   else Verbs.Unhandled();
}

function iCharger_OtherClick()
{
  // LOOK AT
   if(Verbs.UsedAction(eGA_LookAt)) {
    player.Say("TODO");
   }
   else Verbs.Unhandled();
}

function iCoat_OtherClick()
{
  // LOOK AT
   if(Verbs.UsedAction(eGA_LookAt)) {
    player.Say("TODO");
   }
   else Verbs.Unhandled();
}

function iWallet_OtherClick()
{
   if(Verbs.UsedAction(eGA_LookAt)) {
    player.Say("Mi billetera!");
   }
   else if(Verbs.UsedAction(eGA_Open)) {
      player.Say("A ver que tenemos por aqui...");
      Wait(10);
      player.Say("Mi tarjeta de credito");
      player.AddInventory(iCreditCard);
      player.Say("Y el carnet del Club de Fans del Fary.");
      player.AddInventory(iFaryCard);
      player.Say("Cojonudo");
   }
   else Verbs.Unhandled();
}

function iCreditCard_OtherClick()
{
   if(Verbs.UsedAction(eGA_LookAt)) {
    player.Say("TODO");
   }
   else Verbs.Unhandled();
}

function iFaryCard_OtherClick()
{
   if(Verbs.UsedAction(eGA_LookAt)) {
    player.Say("TODO");
   }
   else Verbs.Unhandled();
}

function iLever_OtherClick()
{
   if(Verbs.UsedAction(eGA_LookAt)) {
    player.Say("TODO");
   }
   else Verbs.Unhandled();
}

function iRemoteControl_OtherClick()
{
if(Verbs.UsedAction(eGA_LookAt)) {
    player.Say("El poder!");
   }
   else if(Verbs.UsedAction(eGA_Open)) {
      player.AddInventory(iBatteries);
      player.Say("Pilas a tope de carga");
   }
   else Verbs.Unhandled();
}



function iClock_OtherClick()
{

if(Verbs.UsedAction(eGA_LookAt)) {
  if(hasPutBatteriesOnClock){
    player.Say("Ya funciona, deberia dejarlo en su sitio");
    
  }
  else{
    player.Say("Parece que se ha quedado sin pilas");
    }
   }
else if(Verbs.UsedAction(eGA_UseInv) && player.ActiveInventory == iBatteries){
    hasNeedToFixClock = false;
    hasPutBatteriesOnClock = true;
    player.LoseInventory(iBatteries);
 }
 else Verbs.Unhandled();
}

function iMobile_OtherClick()
{
if(Verbs.UsedAction(eGA_LookAt)) {
    if(isMobileCharged){
      player.Say("Vamos, vamos, mensajes...");
      player.Say("Se quien tiene lo que buscas");
      player.Say("Se quien tiene el Big Whoop");
      player.Say("Lo tiene...");
      Wait(30);
      player.Say("Marcos!");
    }
 }
 else Verbs.Unhandled();
}

function iWaterGlass_OtherClick()
{

}

function iEmptyGlass_OtherClick()
{

}

function iTwoEuroCoin_OtherClick()
{

}

function iOneEuroCoin_OtherClick()
{

}

function iTenEuroNote_OtherClick()
{

}

function iBullet_OtherClick()
{

}

function iIbuprofen_OtherClick()
{

}

function iBatteries_OtherClick()
{
if(Verbs.UsedAction(eGA_LookAt)) {
  player.Say("Pilas a tope de carga");
   }
else if(Verbs.UsedAction(eGA_UseInv) && player.ActiveInventory == iClock){
     hasNeedToFixClock = false;
    hasPutBatteriesOnClock = true;
    player.LoseInventory(iBatteries);
 }
 else Verbs.Unhandled();
}

function iClosetKey_OtherClick()
{

}

